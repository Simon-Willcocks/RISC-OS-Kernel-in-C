#! /bin/bash

#  Copyright 2021 Simon Willcocks
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Which processor, kernel memory manager, MMU handler, and boot sequence do you want to use?

# While there's only one option, this will choose them for you!
if [ "$PROC" = "" ]; then
  PROC=$( echo processor/* )
  if [ ! -d "$PROC" ]; then
    echo "Please define \$PROC, probably as one of "$PROC
    exit 1
  fi
fi
if [ "$MM" = "" ]; then
  MM=$( echo memory/* )
  if [ ! -d "$MM" ]; then
    echo "Please define \$MM, probably as one of "$MM
    exit 1
  fi
fi
if [ "$MMU" = "" ]; then
  MMU=$( echo MMU/* )
  if [ ! -d "$MMU" ]; then
    echo "Please define \$MMU, probably as one of "$MMU
    exit 1
  fi
fi
if [ "$BOOT" = "" ]; then
  BOOT=$( echo boot/* )
  if [ ! -d "$BOOT" ]; then
    echo "Please define \$BOOT, probably as one of "$BOOT
    exit 1
  fi
fi
if [ "$TASK_SLOT" = "" ]; then
  TASK_SLOT=$( echo TaskSlot/* )
  if [ ! -d "$TASK_SLOT" ]; then
    echo "Please define \$TASK_SLOT, probably as one of "$TASK_SLOT
    exit 1
  fi
fi
if [ "$HAL" = "" ]; then
  HAL=$( echo HAL/* )
  if [ ! -d "$HAL" ]; then
    echo "Please define \$HAL, probably as one of "$HAL
    exit 1
  fi
fi

if [ ! -d RiscOS ]; then
  echo "Please locate a RiscOS build tree (or a symbolic link to one) as RiscOS" >&2
  exit 1
fi

# Take the most recent image
ROM=RiscOS/Images/$( ls -rt RiscOS/Images | tail -n 1 )

# My WiFi or Moonfish is occasionally a bit flakey; this
# way we use the most recent build as a cache for the ROM
if [ latest.bin -nt latest.old ] ; then cp latest.bin latest.old ; fi
if [ latest.old -nt $ROM ] ; then ROM=latest.old ; fi

echo Building with RiscOS build $ROM

function paddedstring { echo -ne $1\\x00 | dd bs=4 conv=sync 2>/dev/null ; }
function paddedfile { cat $1 | dd bs=4 conv=sync 2>/dev/null ; }
function byte { echo -en $( printf '\\'x%02x $1 ) ; }
function number { byte $(( $1 & 0xff )); byte $(( ($1 >> 8) & 0xff )); byte $(( ($1 >> 16) & 0xff )); byte $(( ($1 >> 24) & 0xff )) ; }

# Output the binary that should be passed (word-aligned) to 
# ResourceFS_RegisterFiles for the given file
# Timestamp is always zero.

function resourcefile {
  N=${1//\//.}
  S=$( stat -c %s $1 )
  T=${N/*,}
  N=${N/,*}
  if [ "$T" == "$N" ] ; then T=fff ; fi
  L=$(( 24 + $( paddedstring $N | wc -c ) + ( ($S + 3) & ~3 ) ))
  echo $N, $S, $T, $L >&2
  number $L
  number $(( 0xfff00000 + (0x$T << 8) ))
  number 0 # Timestamp zero
  number $S
  number 0x13 # Attributes
  paddedstring $N
  number $(( 4 + $L ))
  paddedfile $1
}

function build_resources_h {
  pushd $1

  rm -f Resources.h # Generated file

  (
  echo 'static uint8_t const __attribute__(( aligned( 4 ) )) resources[] = {' &&
  cd Resources
  ( for i in $( find * -type f )
    do
      echo Adding file ${i} >&2
      resourcefile ${i}
    done 
    number 0
  ) | xxd -i &&
  echo '};' &&
  cd ..
  ) > Resources.h &&

  popd
}

function build_gcc_module {
  MOD=$1 ; shift ; # All other parameters are passed to gcc
  M=$( dirname $MOD ) &&
  if [ "$M" == "." ]
  then SRC=GCC_Modules/$MOD ; M=$MOD
  else SRC=$MOD
  fi
  echo Building shared module $MOD \($M\) &&

  if [ -d $SRC/Resources ]; then
    build_resources_h $SRC
  fi &&

  arm-linux-gnueabi-gcc-8 $SRC/*.c -Wall -o /tmp/module$$.elf -fpic \
        -nostartfiles -nostdlib -fno-zero-initialized-in-bss -static -O4 \
        -g -march=armv8-a+nofp -T module.script -I . -I include \
        -fno-toplevel-reorder $* &&
  arm-linux-gnueabi-objdump -x --disassemble-all /tmp/module$$.elf > Modules/$M.dump &&
  arm-linux-gnueabi-objcopy -R .ignoring -O binary /tmp/module$$.elf Modules/$M,ffa &&
  ( number $( stat --format %s Modules/$M ) ; cat Modules/$M,ffa ) > Modules/$M &&
  arm-linux-gnueabi-objcopy -I binary -O elf32-littlearm -B armv7 Modules/$M --rename-section .data=.text Modules/$M.o &&
  rm /tmp/module$$.elf || exit 1
}

rm Modules/*

# Linking in a HAL module. I don't know if that's what I want to 
# see in future, or a block of modules in a list like in the ROM
build_gcc_module $HAL $HALFLAGS &&

build_gcc_module VFPSupport &&
build_gcc_module Portable &&
build_gcc_module FPEmulator &&
# build_gcc_module MTWimp &&
# build_gcc_module Commands &&
# build_gcc_module Test &&

if [ -f RiscOS/Sources/Kernel/bin/Kernel_gpa ]; then
  echo Making ROM-specific script >&2 &&
  cp rool.script hal.script &&
  sed -n 's/VduInit \(.*\)\.\..*$/VduInit = 0x\1 ;/p;s/MOSPaletteV \(.*\)\.\..*$/MOSPaletteV = 0x\1 ;/p;s/MOSGraphicsV \(.*\)\.\..*$/MOSGraphicsV = 0x\1 ;/p;s/JTABLE \(.*\)\.\..*$/JTABLE = 0x\1 ;/p;s/SysModules_Info \(.*\)\.\..*$/_binary_AllMods_start = 0x\1 ;/p;s/SpriteVecHandler \(.*\)\.\..*$/SpriteVecHandler = 0x\1 ;/p;s/\<HardFont\> \(.*\)\.\..*$/system_font = 0x\1 ;/p;s/ByteVarInitTable \(.*\)\.\..*$/ByteVarInitTable = 0x\1 ;/p;s/SWINumberFromString_Code \(.*\)\.\..*$/SWINumberFromString_Code = 0x\1 ;/p;s/SWINumberToString_Code \(.*\)\.\..*$/SWINumberToString_Code = 0x\1 ;/p' RiscOS/Sources/Kernel/bin/Kernel_gpa >> hal.script &&
  echo 'rom_size = ' $( stat -c %s $ROM )  ' ;' >> hal.script
else
  echo Using existing hal.script because of incomplete RiscOS build tree
fi &&

function rom_kernel_start {
  sed -n 's/KernelBase \(.*\)\.\..*$/\1/p' RiscOS/Sources/Kernel/bin/Kernel_gpa
}

arm-linux-gnueabi-gcc-8 -Wall -I . \
  kernel.c swis.c modules.c usrboot.c swis/*.c \
  $PROC/*.c -I $PROC \
  $BOOT/*.c -I $BOOT \
  $TASK_SLOT/*.c -I $TASK_SLOT \
  $MMU/*.c -I $MMU \
  $MM/*.c -I $MM \
  Modules/*.o \
  -nostartfiles -nostdlib -fno-zero-initialized-in-bss -static \
  -g \
  -march=armv8-a+nofp \
  -T hal.script -Os \
  -o hal.elf \
  $* &&

arm-linux-gnueabi-objcopy -R .ignoring -O binary hal.elf hal.bin &&
arm-linux-gnueabi-objdump -x --disassemble-all hal.elf > hal.dump &&
ls -l *.bin &&

cp hal.bin latest.bin &&
( dd if=$ROM $( stat -c 'bs=%B skip=%b' hal.bin ) >> latest.bin || ( rm latest.bin ; false ) ) &&
arm-linux-gnueabi-objcopy -I binary -O elf32-littlearm -B armv7 latest.bin --rename-section .data=.text latest.elf &&
arm-linux-gnueabi-objdump -x --disassemble-all latest.elf > latest.dump &&
ls -l latest.*

grep -i 'udf.*#' hal.dump # Any found indicates the optimiser detected undefined behaviour, check for warnings etc.
