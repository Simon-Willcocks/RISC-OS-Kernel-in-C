#! /bin/bash

#  Copyright 2021 Simon Willcocks
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Which processor, kernel memory manager, MMU handler, and boot sequence do you want to use?

# While there's only one option, this will choose them for you!
if [ "$PROC" = "" ]; then
  PROC=processor/*
fi
if [ "$MM" = "" ]; then
  MM=memory/*
fi
if [ "$MMU" = "" ]; then
  MMU=MMU/*
fi
if [ "$BOOT" = "" ]; then
  BOOT=boot/*
fi
if [ "$TASK_SLOT" = "" ]; then
  TASK_SLOT=TaskSlot/*
fi

function paddedstring { echo -n $1 | dd bs=4 conv=sync ; }
function byte { echo -en $( printf '\\'x%02x $1 ) ; }
function number { byte $(( $1 & 0xff )); byte $(( ($1 >> 8) & 0xff )); byte $(( ($1 >> 16) & 0xff )); byte $(( ($1 >> 24) & 0xff )) ; }

function resourcefile { number 0 ; number 0; number $( stat -c %s $i ) ; number 3 ; ( echo -ne Resources.CKernel.$i | dd bs=4 conv=sync ) ; number $(( $( stat -c %s $i ) + 4 )) ; ( cat $i  | dd bs=4 conv=sync ); }

function resourcefiles { if [ $# == 1 ]; then number $( stat -c %s $1 ) ; cat $1 ; else number 0 ; cat $1 ; shift ; resourcefiles $*  ; fi ; }

arm-linux-gnueabi-gcc-8 -Wall -I . \
  kernel.c swis.c modules.c swis/*.c \
  $PROC/*.c -I $PROC \
  $BOOT/*.c -I $BOOT \
  $TASK_SLOT/*.c -I $TASK_SLOT \
  $MMU/*.c -I $MMU \
  $MM/*.c -I $MM \
  ro_rom.o \
  -nostartfiles -nostdlib -fno-zero-initialized-in-bss -static \
  -g \
  -march=armv8-a+nofp \
  -T rom.script -Os \
  -o rom.elf &&

arm-linux-gnueabi-objcopy -R .ignoring -O binary rom.elf rom.bin &&
arm-linux-gnueabi-objdump -x --disassemble-all rom.elf > rom.dump &&
ls -l rom.*

