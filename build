#! /bin/bash

#  Copyright 2021 Simon Willcocks
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Which processor, kernel memory manager, MMU handler, and boot sequence do you want to use?

# While there's only one option, this will choose them for you!
if [ "$PROC" = "" ]; then
  PROC=$( echo processor/* )
  if [ ! -d "$PROC" ]; then
    echo "Please define \$PROC, probably as one of "$PROC
    exit 1
  fi
fi
if [ "$MM" = "" ]; then
  MM=$( echo memory/* )
  if [ ! -d "$MM" ]; then
    echo "Please define \$MM, probably as one of "$MM
    exit 1
  fi
fi
if [ "$MMU" = "" ]; then
  MMU=$( echo MMU/* )
  if [ ! -d "$MMU" ]; then
    echo "Please define \$MMU, probably as one of "$MMU
    exit 1
  fi
fi
if [ "$BOOT" = "" ]; then
  BOOT=$( echo boot/* )
  if [ ! -d "$BOOT" ]; then
    echo "Please define \$BOOT, probably as one of "$BOOT
    exit 1
  fi
fi
if [ "$TASK_SLOT" = "" ]; then
  TASK_SLOT=$( echo TaskSlot/* )
  if [ ! -d "$TASK_SLOT" ]; then
    echo "Please define \$TASK_SLOT, probably as one of "$TASK_SLOT
    exit 1
  fi
fi
if [ "$HAL" = "" ]; then
  HAL=$( echo HAL/* )
  if [ ! -d "$HAL" ]; then
    echo "Please define \$HAL, probably as one of "$HAL
    exit 1
  fi
fi

if [ "$ROMSRC" = "" ]; then
  ROMSRC=$( echo RISCOS/* )
  if [ ! -d "$ROMSRC" ]; then
    echo "Please define \$ROMSRC, probably as one of "$ROMSRC
    exit 1
  fi
fi

if [ ! -f $ROMSRC/ro_rom.o ] ; then
  $ROMSRC/fetch
fi

function paddedstring { echo -n $1 | dd bs=4 conv=sync ; }
function byte { echo -en $( printf '\\'x%02x $1 ) ; }
function number { byte $(( $1 & 0xff )); byte $(( ($1 >> 8) & 0xff )); byte $(( ($1 >> 16) & 0xff )); byte $(( ($1 >> 24) & 0xff )) ; }

function resourcefile { number 0 ; number 0; number $( stat -c %s $i ) ; number 3 ; ( echo -ne Resources.CKernel.$i | dd bs=4 conv=sync ) ; number $(( $( stat -c %s $i ) + 4 )) ; ( cat $i  | dd bs=4 conv=sync ); }

function resourcefiles { if [ $# == 1 ]; then number $( stat -c %s $1 ) ; cat $1 ; else number 0 ; cat $1 ; shift ; resourcefiles $*  ; fi ; }

# Linking in a HAL module. I don't know if that's what I want to see in future, or a block of modules in a list like in the ROM
arm-linux-gnueabi-gcc-8 $HAL/*.c -Wall -o /tmp/module$$.elf -fpic \
        -nostartfiles -nostdlib -fno-zero-initialized-in-bss -static -O4 \
        -g -march=armv8-a+nofp -T module.script -I . -DNO_MODULE_SIZE &&
arm-linux-gnueabi-objdump -x --disassemble-all /tmp/module$$.elf > HAL.dump &&
arm-linux-gnueabi-objcopy -R .ignoring -O binary /tmp/module$$.elf Modules/HAL &&
arm-linux-gnueabi-objcopy -I binary -O elf32-littlearm -B armv7 Modules/HAL --rename-section .data=.text Modules/HAL.o &&
rm /tmp/module$$.elf &&

arm-linux-gnueabi-gcc-8 FontManager/*.c -Wall -o /tmp/module$$.elf -fpic \
        -nostartfiles -nostdlib -fno-zero-initialized-in-bss -static -O4 \
        -g -march=armv8-a+nofp -T module.script -I . -DNO_MODULE_SIZE &&
arm-linux-gnueabi-objdump -x --disassemble-all /tmp/module$$.elf > FontManager.dump &&
arm-linux-gnueabi-objcopy -R .ignoring -O binary /tmp/module$$.elf Modules/FontManager &&
arm-linux-gnueabi-objcopy -I binary -O elf32-littlearm -B armv7 Modules/FontManager --rename-section .data=.text Modules/FontManager.o &&
rm /tmp/module$$.elf &&

arm-linux-gnueabi-gcc-8 -Wall -I . \
  kernel.c swis.c modules.c swis/*.c \
  $PROC/*.c -I $PROC \
  $BOOT/*.c -I $BOOT \
  $TASK_SLOT/*.c -I $TASK_SLOT \
  $MMU/*.c -I $MMU \
  $MM/*.c -I $MM \
  Modules/HAL.o \
  Modules/FontManager.o \
  $ROMSRC/ro_rom.o \
  -nostartfiles -nostdlib -fno-zero-initialized-in-bss -static \
  -g \
  -march=armv8-a+nofp \
  -T $ROMSRC/rom.script -Os \
  -o rom.elf \
  $* &&
arm-linux-gnueabi-objcopy -R .ignoring -O binary rom.elf rom.bin &&
arm-linux-gnueabi-objdump -x --disassemble-all rom.elf | sed -n '1,/fc010000 <_binary_ro_rom_img_start>:/p' > rom.dump &&

cp rool.script hal.script &&
sed -n 's/JTABLE \(.*\)\.\..*$/JTABLE = 0x\1 ;/p;s/SysModules_Info \(.*\)\.\..*$/_binary_AllMods_start = 0x\1 ;/p;s/SpriteVecHandler \(.*\)\.\..*$/SpriteVecHandler = 0x\1 ;/p;s/\<HardFont\> \(.*\)\.\..*$/system_font = 0x\1 ;/p;s/ByteVarInitTable \(.*\)\.\..*$/ByteVarInitTable = 0x\1 ;/p' /mnt/RiscOS/Sources/Kernel/bin/Kernel_gpa >> hal.script &&
echo 'rom_size = 5 << 20 ;' >> hal.script


arm-linux-gnueabi-gcc-8 -Wall -I . \
  kernel.c swis.c modules.c swis/*.c \
  $PROC/*.c -I $PROC \
  $BOOT/*.c -I $BOOT \
  $TASK_SLOT/*.c -I $TASK_SLOT \
  $MMU/*.c -I $MMU \
  $MM/*.c -I $MM \
  Modules/HAL.o \
  Modules/FontManager.o \
  -nostartfiles -nostdlib -fno-zero-initialized-in-bss -static \
  -g \
  -march=armv8-a+nofp \
  -T hal.script -Os \
  -o hal.elf \
  $* &&

arm-linux-gnueabi-objcopy -R .ignoring -O binary hal.elf hal.bin &&
arm-linux-gnueabi-objdump -x --disassemble-all hal.elf > hal.dump &&
ls -l rom.bin hal.bin

