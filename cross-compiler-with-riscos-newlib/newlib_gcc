#! /bin/bash

# Copyright (c) 2022 Simon Willcocks

echo This script should build a gcc suitable for RISC OS
echo
echo It builds a gcc that's suitable for compiling your libgloss
echo without any OS-specific code.
echo
echo Then it builds another using it that should allow you to
echo compile executables to run on RISC OS.
echo
echo Initially, you'll have to make a binary from the elf file
echo using arm-riscos-eabi-objcopy and filetype it. But an ELF
echo loader should be easy to create using GNU tools.
echo
echo There is no support for constructors or destructors.
echo Or multi-threading, but that comes next.

# These versions appear to work together.
# Hopefully, newer versions will also work, as long as the patch
# does.

BINUTILS_VER=2.38
GCC_VER=10.3.0
MPFR_VER=4.1.0
MPC_VER=1.2.1
GMP_VER=6.2.1

ROOT=$(pwd)
SRC=$ROOT/sources
PREFIX=$HOME/tools

if [ ! -d libgloss ]; then
(
  echo $0 expects there to be a libgloss directory containing
  echo a configure script and some source files that provide the system
  echo call implementations for your platform:
  echo
  echo exit close environ execve fork fstat getpid isatty kill
  echo link lseek open read stat times unlink wait write gettimeofday
) >&2
  exit 1
fi

if [ ! -d $SRC ]; then
  mkdir -P $SRC
fi

# Step 1, build binutils, independent of the target OS

if [ ! -d binutils-$BINUTILS_VER ] ; then
  if [ ! -f $SRC/binutils-$BINUTILS_VER.tar.xz ] ; then
    wget -P $SRC https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS_VER.tar.xz
  fi
  echo -n Extracting files from $SRC/binutils-$BINUTILS_VER.tar.xz
  tar xf $SRC/binutils-$BINUTILS_VER.tar.xz 
  echo ... done.
fi

mkdir build-binutils
cd build-binutils
THIS_MACHINE=$( ../binutils-$BINUTILS_VER/config.guess )

../binutils-$BINUTILS_VER/configure --build=$THIS_MACHINE --host=$THIS_MACHINE --target=arm-riscos-eabi --prefix=$HOME/tools &&
make && make install &&
echo Binutils built OK
cd ..

# Step 2, build gcc, newlib, and libgloss to provide the syscalls

# Extras needed to build gcc
# TODO: What is ISL?

if [ ! -d mpfr-$MPFR_VER ] ; then 
  if [ ! -f $SRC/mpfr-$MPFR_VER.tar.xz ] ; then
    wget -P $SRC https://www.mpfr.org/mpfr-current/mpfr-$MPFR_VER.tar.xz
  fi
  echo -n Extracting files from $$SRC/mpfr-$MPFR_VER.tar.xz
  tar xf $SRC/mpfr-$MPFR_VER.tar.xz 
  echo ... done.
fi

if [ ! -d mpc-$MPC_VER ] ; then
  if [ ! -f $SRC/mpc-$MPC_VER.tar.gz ] ; then
    wget -P $SRC https://ftp.gnu.org/pub/gnu/mpc/mpc-$MPC_VER.tar.gz
  fi
  echo -n Extracting files from $SRC/mpc-$MPC_VER.tar.gz
  tar xf $SRC/mpc-$MPC_VER.tar.gz
  echo ... done.
fi

if [ ! -d gmp-$GMP_VER ] ; then
  if [ ! -f $SRC/gmp-$GMP_VER.tar.xz ] ; then
    wget -P $SRC https://gmplib.org/download/gmp/gmp-$GMP_VER.tar.xz
  fi
  echo -n Extracting files from $SRC/gmp-$GMP_VER.tar.xz
  tar xf $SRC/gmp-$GMP_VER.tar.xz 
  echo ... done.
fi

if [ ! -d newlib-cygwin-master ]; then
  if [ ! -f $SRC/master.zip ] ; then
    wget -P $SRC/ https://github.com/mirror/newlib-cygwin/archive/refs/heads/master.zip
  fi
  echo -n Extracting files from $SRC/master.zip
  unzip $SRC/master.zip
  echo ... done.
  echo Patching newlib-cygwin-master
fi

rm -rf gcc-$GCC_VER

if [ ! -d gcc-$GCC_VER ] ; then
  if [ ! -f $SRC/gcc-$GCC_VER.tar.xz ] ; then
    wget -P $SRC https://ftp.gwdg.de/pub/misc/gcc/releases/gcc-$GCC_VER/gcc-$GCC_VER.tar.xz
  fi
  echo -n Extracting files from $SRC/gcc-$GCC_VER.tar.xz
  tar xf $SRC/gcc-$GCC_VER.tar.xz 
  echo ... done.

  cd gcc-$GCC_VER
  ln -s $ROOT/mpfr-$MPFR_VER mpfr
  ln -s $ROOT/gmp-$GMP_VER gmp
  ln -s $ROOT/mpc-$MPC_VER mpc
  ln -s $ROOT/newlib-cygwin-master/newlib newlib
  ln -s $ROOT/libgloss libgloss

  # Copy riscos-crt*.c
  ln -s $ROOT/CRT/* libgcc/config/arm/

  echo Patching gcc-$GCC_VER
  patch -Np1 <<"EOF"
diff -Naur --no-dereference gcc-10.3.0/libgcc/config/arm/t-riscos gcc-10.3.0.changed/libgcc/config/arm/t-riscos
diff -Nar -U 7 --no-dereference gcc-10.3.0/libgcc/config/arm/t-riscos gcc-10.3.0-changed/libgcc/config/arm/t-riscos
--- gcc-10.3.0/libgcc/config/arm/t-riscos	1970-01-01 01:00:00.000000000 +0100
+++ gcc-10.3.0-changed/libgcc/config/arm/t-riscos	2022-06-30 07:15:37.246876004 +0200
@@ -0,0 +1,21 @@
+
+# Cannot use default rules due to having no stack on startup
+CUSTOM_CRTIN = yes
+
+# CRTSTUFF is executes constructors and destructors; it will need a stack
+# crti.c gives it a stack
+CUSTOM_CRTSTUFF = yes
+#
+# There's no need to specify -o $@ because crt_compile puts in -MT crtX.o
+
+crti.o: $(srcdir)/config/arm/riscos-crti.c
+	$(crt_compile) -c $<
+
+crtn.o: $(srcdir)/config/arm/riscos-crtn.c
+	$(crt_compile) -c $<
+
+crtbegin.o: $(srcdir)/config/arm/riscos-crtbegin.c
+	$(crt_compile) -c $<
+
+crtend.o: $(srcdir)/config/arm/riscos-crtend.c
+	$(crt_compile) -c $<
diff -Nar -U 7 --no-dereference gcc-10.3.0/libgcc/config.host gcc-10.3.0-changed/libgcc/config.host
--- gcc-10.3.0/libgcc/config.host	2021-04-08 13:56:29.805761640 +0200
+++ gcc-10.3.0-changed/libgcc/config.host	2022-06-30 07:15:37.250876009 +0200
@@ -493,14 +493,28 @@
 	extra_parts="crtbegin.o crtend.o crti.o crtn.o"
 	unwind_header=config/arm/unwind-arm.h
 	;;
 arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems*)
 	tmake_file="${tmake_file} arm/t-arm arm/t-elf t-fixedpoint-gnu-prefix"
 	tm_file="$tm_file arm/bpabi-lib.h"
 	case ${host} in
+        arm*-riscos-eabi*)
+	  # Do not want crt*.o files, newlib implementation will provide
+	  # _start in section .init
+	  # riscos crti, crtn files
+	  tmake_file="${tmake_file} arm/t-riscos"
+	  # unwind
+	  tmake_file="${tmake_file} arm/t-bpabi"
+	  # fast maths
+	  tmake_file="${tmake_file} t-crtfm"
+	  # These files will be installed. IDK if this variable is also used
+	  # to list the files to link. (Probably not, because the user code
+	  # goes in the middle somewhere.)
+	  extra_parts="crtbegin.o crtend.o crti.o crtn.o"
+	  ;;
 	arm*-*-eabi* | arm*-*-rtems*)
 	  tmake_file="${tmake_file} arm/t-bpabi t-crtfm"
 	  extra_parts="crtbegin.o crtend.o crti.o crtn.o"
 	  ;;
 	arm*-*-symbianelf*)
 	  tmake_file="${tmake_file} arm/t-symbian t-slibgcc-nolc-override"
 	  tm_file="$tm_file arm/symbian-lib.h"
EOF

  cd ..

  echo gcc directory modified
fi

mkdir build-gcc
cd build-gcc

../gcc-$GCC_VER/configure --build=$THIS_MACHINE --host=$THIS_MACHINE --target=arm-riscos-eabi --disable-libstdcxx --with-newlib --with-libgloss --without-libc --without-libm --prefix=$HOME/tools --without-headers --enable-initfini-array --disable-nls --disable-shared --disable-multilib --disable-decimal-float --disable-threads --disable-libatomic --disable-libgomp --disable-libquadmath --disable-libssp --disable-libvtv --disable-libstdcxx --enable-languages=c,c++ --disable-newlib-supplied-syscalls &&
make && make install &&
echo arm-riscos-eabi-gcc built OK with libgloss || echo Build failed
cd ..
